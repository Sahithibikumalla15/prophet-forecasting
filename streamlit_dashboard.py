# -*- coding: utf-8 -*-
"""Untitled40.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Qg_iYkW8j4h-IxylAX55VGmpHms7dxp1
"""

import streamlit as st
import pandas as pd
import numpy as np
import os
import glob
import plotly.express as px

# Set page title
st.set_page_config(page_title="Prophet Forecast Dashboard", layout="wide")
st.title("📊 Childcare Staffing Forecast Dashboard")

# Load forecast CSV files from prophet_outputs
forecast_files = glob.glob('prophet_outputs/forecast_next_week_*.csv')

if not forecast_files:
    st.warning("⚠️ No forecast files found in 'prophet_outputs' directory.")
    st.stop()

# Combine all forecasts
all_data = []
for file in forecast_files:
    room = os.path.basename(file).replace('forecast_next_week_', '').replace('.csv', '').replace('_', ' ')
    df = pd.read_csv(file, parse_dates=['ds'])
    df['Room'] = room
    all_data.append(df)

df = pd.concat(all_data).sort_values('ds')

# Sidebar Room Selection
rooms = sorted(df['Room'].unique())
selected_room = st.sidebar.selectbox("🏫 Select Room", options=['All Rooms'] + rooms)

# Filter data for selected room
filtered_df = df.copy()
if selected_room != 'All Rooms':
    filtered_df = filtered_df[filtered_df['Room'] == selected_room]

# Student Forecast Line Chart
st.subheader(f"📈 Forecasted Student Count ({selected_room})")
fig_students = px.line(
    filtered_df,
    x='ds',
    y='yhat',
    color='Room' if selected_room == 'All Rooms' else None,
    labels={'ds': 'Date & Time', 'yhat': 'Student Count'},
    title='Forecasted Students per 30-minute Interval'
)
st.plotly_chart(fig_students, use_container_width=True)

# Staff Forecast Line Chart
st.subheader("🧑‍🏫 Estimated Staff Requirements")
if 'EstimatedStaff' in filtered_df.columns:
    if selected_room == 'All Rooms':
        total_staff = filtered_df.groupby('ds')['EstimatedStaff'].sum().reset_index()
        fig_staff = px.line(
            total_staff,
            x='ds',
            y='EstimatedStaff',
            labels={'ds': 'Date & Time', 'EstimatedStaff': 'Total Staff'},
            title='Total Staff Required (All Rooms)'
        )
    else:
        fig_staff = px.line(
            filtered_df,
            x='ds',
            y='EstimatedStaff',
            labels={'ds': 'Date & Time', 'EstimatedStaff': 'Staff Count'},
            title=f"Staff Requirement for {selected_room}"
        )
    st.plotly_chart(fig_staff, use_container_width=True)
else:
    st.info("⚠️ No 'EstimatedStaff' column found in forecast data.")

# Daily Max Staff Summary Table
st.subheader("📆 Daily Maximum Staff Need")
df['Date'] = df['ds'].dt.date
daily_summary = df.groupby(['Room', 'Date'])['EstimatedStaff'].max().reset_index()
if selected_room != 'All Rooms':
    daily_summary = daily_summary[daily_summary['Room'] == selected_room]
st.dataframe(daily_summary.rename(columns={'EstimatedStaff': 'Max Staff Needed'}))

# Heatmap: Hourly Demand by Day
st.subheader("🌡️ Heatmap: Hourly Staff Demand by Day of Week")
df['Hour'] = df['ds'].dt.hour
df['Day'] = df['ds'].dt.day_name()
heatmap_data = df.groupby(['Day', 'Hour'])['EstimatedStaff'].sum().unstack()
fig_heatmap = px.imshow(
    heatmap_data,
    labels=dict(x="Hour", y="Day", color="Staff Needed"),
    title="Staffing Heatmap (Weekdays Only)"
)
st.plotly_chart(fig_heatmap, use_container_width=True)

# CSV Download
st.subheader("⬇️ Download Forecast Data")
csv = filtered_df.to_csv(index=False).encode()
st.download_button(
    label="Download Filtered Forecast as CSV",
    data=csv,
    file_name=f"{selected_room.replace(' ', '_')}_forecast.csv",
    mime='text/csv'
)

# Notes
st.markdown("""
---
**📌 Notes:**
- Forecasts are generated using Facebook Prophet.
- Student counts are forecasted in 30-minute blocks.
- Staff estimates use room-specific staff-to-student ratios.
- Weekends are excluded from predictions.
""")